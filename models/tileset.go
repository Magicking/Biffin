package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

// Tileset tileset
// swagger:model Tileset
type Tileset struct {

	// GID corresponding to the first tile in the set
	Firstgid int64 `json:"firstgid,omitempty"`

	// Image used for tiles in this set
	Image string `json:"image,omitempty"`

	// Height of source image in pixels
	Imageheight int64 `json:"imageheight,omitempty"`

	// Width of source image in pixels
	Imagewidth int64 `json:"imagewidth,omitempty"`

	// Buffer between image edge and first tile (pixels)
	Margin int64 `json:"margin,omitempty"`

	// Name given to this tileset
	Name string `json:"name,omitempty"`

	// String key-value pairs
	Properties interface{} `json:"properties,omitempty"`

	// Spacing between adjacent tiles in image (pixels)
	Spacing int64 `json:"spacing,omitempty"`

	// Array of Terrains (optional)
	Terrains []*Tileset `json:"terrains"`

	// Maximum height of tiles in this set
	Tileheight int64 `json:"tileheight,omitempty"`

	// Per-tile properties, indexed by gid as string
	Tileproperties interface{} `json:"tileproperties,omitempty"`

	// Gid-indexed Tiles (optional)
	Tiles interface{} `json:"tiles,omitempty"`

	// Maximum width of tiles in this set
	Tilewidth int64 `json:"tilewidth,omitempty"`
}

// Validate validates this tileset
func (m *Tileset) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTerrains(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Tileset) validateTerrains(formats strfmt.Registry) error {

	if swag.IsZero(m.Terrains) { // not required
		return nil
	}

	for i := 0; i < len(m.Terrains); i++ {

		if swag.IsZero(m.Terrains[i]) { // not required
			continue
		}

		if m.Terrains[i] != nil {

			if err := m.Terrains[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}
