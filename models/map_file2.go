// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// MapFile2 map file2
// swagger:model MapFile2
type MapFile2 struct {

	// Building elements
	BuildingLayer []*BaseUnit `json:"BuildingLayer"`

	// Object elements
	ObjectLayer []*BaseUnit `json:"ObjectLayer"`

	// Terrain units
	TerrainLayer []*BaseUnit `json:"TerrainLayer"`

	// Height in pixels. Ignored if using a gid.
	Height int64 `json:"height,omitempty"`

	// Units of the game
	Units []*GameUnit `json:"units"`

	// Width in pixels. Ignored if using a gid.
	Width int64 `json:"width,omitempty"`
}

// Validate validates this map file2
func (m *MapFile2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBuildingLayer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectLayer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTerrainLayer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnits(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MapFile2) validateBuildingLayer(formats strfmt.Registry) error {

	if swag.IsZero(m.BuildingLayer) { // not required
		return nil
	}

	for i := 0; i < len(m.BuildingLayer); i++ {
		if swag.IsZero(m.BuildingLayer[i]) { // not required
			continue
		}

		if m.BuildingLayer[i] != nil {
			if err := m.BuildingLayer[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("BuildingLayer" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MapFile2) validateObjectLayer(formats strfmt.Registry) error {

	if swag.IsZero(m.ObjectLayer) { // not required
		return nil
	}

	for i := 0; i < len(m.ObjectLayer); i++ {
		if swag.IsZero(m.ObjectLayer[i]) { // not required
			continue
		}

		if m.ObjectLayer[i] != nil {
			if err := m.ObjectLayer[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ObjectLayer" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MapFile2) validateTerrainLayer(formats strfmt.Registry) error {

	if swag.IsZero(m.TerrainLayer) { // not required
		return nil
	}

	for i := 0; i < len(m.TerrainLayer); i++ {
		if swag.IsZero(m.TerrainLayer[i]) { // not required
			continue
		}

		if m.TerrainLayer[i] != nil {
			if err := m.TerrainLayer[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("TerrainLayer" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MapFile2) validateUnits(formats strfmt.Registry) error {

	if swag.IsZero(m.Units) { // not required
		return nil
	}

	for i := 0; i < len(m.Units); i++ {
		if swag.IsZero(m.Units[i]) { // not required
			continue
		}

		if m.Units[i] != nil {
			if err := m.Units[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("units" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *MapFile2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MapFile2) UnmarshalBinary(b []byte) error {
	var res MapFile2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
